/*
문제 설명
  n명이 입국심사를 위해 줄을 서서 기다리고 있습니다. 각 입국심사대에 있는 심사관마다 심사하는데 걸리는 시간은 다릅니다.

  처음에 모든 심사대는 비어있습니다. 한 심사대에서는 동시에 한 명만 심사를 할 수 있습니다. 가장 앞에 서 있는 사람은 비어 있는 심사대로 가서 심사를 받을 수 있습니다. 하지만 더 빨리 끝나는 심사대가 있으면 기다렸다가 그곳으로 가서 심사를 받을 수도 있습니다.

  모든 사람이 심사를 받는데 걸리는 시간을 최소로 하고 싶습니다.

  입국심사를 기다리는 사람 수 n, 각 심사관이 한 명을 심사하는데 걸리는 시간이 담긴 배열 times가 매개변수로 주어질 때, 모든 사람이 심사를 받는데 걸리는 시간의 최솟값을 return 하도록 solution 함수를 작성해주세요.

제한사항
  - 입국심사를 기다리는 사람은 1명 이상 1,000,000,000명 이하입니다.
  - 각 심사관이 한 명을 심사하는데 걸리는 시간은 1분 이상 1,000,000,000분 이하입니다.
  - 심사관은 1명 이상 100,000명 이하입니다.
입출력 예
  n	  times	    return
  6	  [7, 10]	  28
입출력 예 설명
  가장 첫 두 사람은 바로 심사를 받으러 갑니다.

  7분이 되었을 때, 첫 번째 심사대가 비고 3번째 사람이 심사를 받습니다.

  10분이 되었을 때, 두 번째 심사대가 비고 4번째 사람이 심사를 받습니다.

  14분이 되었을 때, 첫 번째 심사대가 비고 5번째 사람이 심사를 받습니다.

  20분이 되었을 때, 두 번째 심사대가 비지만 6번째 사람이 그곳에서 심사를 받지 않고 1분을 더 기다린 후에 첫 번째 심사대에서 심사를 받으면 28분에 모든 사람의 심사가 끝납니다.
*/

/*
  해설
    처음에 어떻게 이분탐색으로 풀 수 있다는 건지 헷갈렸다. 처음에는 배열의 시간을 매번 그 시간만큼 더해주고 정렬하고를 반복해야하나 싶었으나, 
    비효율적인 코드가 될 것 같았고, 풀릴지도 의문이어서 다른 사람의 코드를 참고해서 이해할 수 있었다.
    입국심사를 기다리는 사람과, 걸리는 시간이 1명(분)이상 10억명(분)이하라는 제한사항을 보면 log(n)으로 풀어야한다는 것을 알 수 있다. (이분탐색)
    이분탐색에서 처음, 끝값은 "최저로 걸리는 시간"과 "최대로 걸리는 시간" 으로 설정한다.
    그리고 "처리할수있는인원(sum)" 처리해야하는인원(n)을 비교하면서 둘이 같다면, 시간 그 때 걸린 시간인 mid를 출력해주면 된다.
*/
function solution(n, times) {
  var answer = Number.MAX_SAFE_INTEGER;
  // 최저 걸리는 시간 -> 1분
  // 최대 걸리는 시간 -> 최대 시간(Math.max(...times)) * 사람수(n)
  let left = 1;
  let right = Math.max(...times) * n;

  // 이분탐색
  while (left <= right) {
    let sum = 0;
    let mid = Math.floor((left + right) / 2); // 대충 중간 시간을 정한다.
    // 몇 명까지 처리할 수 있는지 판단
    for (let time of times) {
      sum += Math.floor(mid / time);
    }
    // 만약에 "처리해야하는사람(n)"보다 "처리할수있는사람(sum)"이 적다면, 시간을 늘려봄
    if (n > sum) {
      left = mid + 1;
      // 반대의 경우 시간을 줄여봄 (잉여 시간이 있는 경우니까)
    } else {
      right = mid - 1;
      answer = Math.min(answer, mid);
    }
  }
  return answer;
}
